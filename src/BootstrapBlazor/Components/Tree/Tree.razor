@namespace BootstrapBlazor.Components
@inherits BootstrapComponentBase

@if (Items == null)
{
    if (ShowSkeleton)
    {
        <SkeletonTree AdditionalAttributes="AdditionalAttributes"></SkeletonTree>
    }
    else
    {
        <div class="@LoadingClassString">
            <Spinner Color="Color.Primary" />
        </div>
    }
}
else
{
    <div tabindex="0" role="tree" class="@ClassString" @ref="@TreeElement"
         @ondragover:preventDefault @ondragover="() => {}"
         @ondragenter:preventDefault @ondragenter="() => {}"
         @ondrop:preventDefault @ondrop="@OnDrop"
         ondragstart="event.dataTransfer.setData('text', event.target.id);"
         @ondrop:stopPropagation
         @ondragenter:stopPropagation
         @ondragend:stopPropagation
         @ondragover:stopPropagation
         @ondragleave:stopPropagation
         @ondragstart:stopPropagation>
        <ul class="tree-root" role="tree">
            @foreach (var item in Items)
            {
                @RenderTreeItem(item)
            }
        </ul>
    </div>
}

@code {
    private RenderFragment<TreeItem> RenderTreeNode => item =>
    @<ul class="@GetTreeNodeClassString(item)" role="group">
        @foreach (var node in item.Items)
        {
            @RenderTreeItem(node)
        }
    </ul>;

private RenderFragment<TreeItem> RenderTreeItem => item =>
    @<li role="treeitem" class="@GetItemClassString(item)" >
        <div class="tree-space" @ondragenter="() => OnDragSpaceEnter(item, true)" @ondragleave="() => { DragSpace = null; }"
             @ondragleave:stopPropagation>
            @if (DragSpace == item && IsUp)
            {
                <i class="fa fa-arrow-right"></i>
            }
        </div>
        <div class="tree-content" draggable="@(CanDrag && item.CanDrag ? "true" : "false")"
             @ondragstart="() => OnDragStart(item)"
             @ondragend="() => OnDragEnd(item)"
             @ondragenter="() => OnDragEnter(item)"
             @ondragleave="OnDragLeave"
             @ondragleave:stopPropagation
             @ondragstart:stopPropagation>
            <i class="@GetCaretClassString(item)" @onclick="() => OnExpandRowAsync(item)"></i>
            @if (ShowCheckbox)
            {
                <Checkbox @bind-Value="@item.Checked" IsDisabled="@item.IsDisabled" SkipValidate="true"
                          ShowLabel="false" ShowAfterLabel="false"
                          OnStateChanged="(state, v) => OnStateChanged(state, item)"/>
            }
            else if (ShowRadio)
            {
                <Radio @bind-Value="@item.Checked" IsDisabled="@item.IsDisabled" SkipValidate="true"
                       ShowLabel="false" ShowAfterLabel="false" GroupName="@GroupName"
                       OnClick="p => OnRadioClick(item)" State="@Tree.CheckState(item)"/>
            }
            <div class="tree-node" @onclick="() => OnClick(item)">
                @if (ShowIcon)
                {
                    <i class="@GetIconClassString(item)"></i>
                }
                @if (item.Template == null)
                {
                    <span class="@item.CssClass">@item.Text</span>
                }
                else
                {
                    @item.Template
                }
            </div>
        </div>
        <div class="tree-space" @ondragenter="() => OnDragSpaceEnter(item, false)" @ondragleave="() => { DragSpace = null; }"
               @ondragleave:stopPropagation>
              @if (DragSpace == item && !IsUp)
              {
                  <i class="fa fa-arrow-right"></i>
              }
                </div>
        @if (item.ShowLoading)
        {
            <ul class="tree-ul show">
                <Spinner Size="Size.Small" Color="Color.Primary"/>
            </ul>
        }
        else if (item.Items.Any())
        {
            @RenderTreeNode(item)
        }
    </li>;
}
